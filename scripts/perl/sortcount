#!/usr/bin/perl
#
# Programmer:    Craig Stuart Sapp <craig.stanford.edu>
# Creation Date: Sat Apr  6 23:09:41 PDT 2013
# Last Modified: Thu Jun  9 12:54:04 PDT 2016
# Filename:      sortcount
# Syntax:        perl 5
#
# Description:   shorthand for the pipeline:
#                   sort | uniq -c | sort -nr
#

use strict;
use Getopt::Long;
Getopt::Long::Configure("bundling");

my $alphabeticQ = 0;  # sort output lines alphabetically
my $percentQ    = 0;  # show counts as percentages
my $fractionQ   = 0;  # show counts as fractions
my $totalQ      = 0;  # show total count of input lines
my $smallQ      = 0;  # sort by smallest numbers first
my $humdrumQ    = 0;  # output data in Humdrum file format

GetOptions (
   'a|alphabetic' => \$alphabeticQ,
   'p|percent'    => \$percentQ,
   'f|fraction'   => \$fractionQ,
   't|total'      => \$totalQ,
   's|small'      => \$smallQ,
   'h|humdrum'    => \$humdrumQ,
);

my @contents = <>;

my (%unique, @keys, @output, $line, $sum, $key, $value);

foreach $line (@contents) {
   $unique{$line}++;
}

@keys = keys %unique;
@keys = sort @keys if $alphabeticQ;
$sum = @keys;

if    ($humdrumQ && $percentQ)  { print "**pcent\t**data\n";  } 
elsif ($humdrumQ && $fractionQ) { print "**frac\t**data\n";   } 
elsif ($humdrumQ)               { print "**count\t**data\n";  }
   
foreach $key (@keys) {
   if    ($percentQ)  { $value = int(10000.0*$unique{$key}/$sum + 0.5)/100.0; } 
   elsif ($fractionQ) { $value = int(1000.0*$unique{$key}/$sum + 0.5)/1000.0; }
   else               { $value = $unique{$key}; }
   $output[@output] =  "$value\t$key";
}

if ($smallQ && !$alphabeticQ) {
   @output = sort { $a <=> $b } @output;
} elsif (!$alphabeticQ) {
   @output = sort { $b <=> $a } @output;
}

print join("", @output);

print "*-\t*-\n" if $humdrumQ;
if ($totalQ) {
   print "!!" if $humdrumQ;
   print "TOTAL:\t$sum\n";
}


